<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatisstudy.mapper.UserMapper">
    <cache-ref namespace="com.example.mybatisstudy.mapper.RoleMapper" />
    <resultMap id="userMap" type="com.example.mybatisstudy.model.SysUser">
        <result  property="userPassword" column="user_password"/>
        <result property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>
    <select id="selectAll" resultType="com.example.mybatisstudy.model.SysUser">
        select id,
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time
        from sys_user
    </select>
    <select id="selectRolesByUserId" resultType="com.example.mybatisstudy.model.SysRole">
        select r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name AS "user.userName",
            u.user_email AS "user.userEmail"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>
    <insert id="insert">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (id, user_name, user_password,
        <if test="userEmail != null and userEmail != ''">
            user_email,
        </if>
        user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword},
        <if test="userEmail != null and userEmail != ''">
            #{userEmail},
        </if>
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!-- selectKey中的语句用于获取最后一个插入数据库数据的主键 -->
    <insert id="insert3">
        INSERT INTO sys_user (user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        UPDATE sys_user
        SET user_name = #{userName},
          user_password = #{userPassword},
          user_email = #{userEmail},
          user_info = #{userInfo},
          head_img = #{headImg, jdbcType = BLOB},
          create_time = #{createTime, jdbcType = TIMESTAMP}
        WHERE id = #{id}
    </update>
    <delete id="deleteById">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.example.mybatisstudy.model.SysRole">
        SELECT r.id,
          r.role_name roleName,
          r.enabled,
          r.create_by createBy,
          r.create_time createTime
        FROM sys_user u
        INNER JOIN sys_user_role ur on u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}
    </select>

    <select id="selectByUser" resultType="com.example.mybatisstudy.model.SysUser">
        SELECT id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        FROM sys_user
        <where>
            <if test="userName != null  and userName != ''">
                <bind name="userNameLike"
                      value="'%' + userName + '%'" />
                AND user_name like concat('%', #{userNameLike}, '%')
            </if>
            <if test="userEmail != '' and userEmail != null">
                AND user_email = #{userEmail}
            </if>
        </where>
    </select>

    <update id="updateByIdSelective">
        UPDATE sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType = BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType = TIMESTAMP},
            </if>
            id = #{id}
        </set>
        WHERE id = #{id}
    </update>
    <select id="selectByIdOrUserName" resultType="com.example.mybatisstudy.model.SysUser">
        SELECT id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null and id != ''">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName};
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultType="com.example.mybatisstudy.model.SysUser">
        SELECT id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        from sys_user
        WHERE id  IN
        <foreach collection="list" open="(" close=")" separator=","
                 item="id" index="i">
            #{id}
        </foreach>
    </select>

    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(
          user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (
              #{user.userName}, #{user.userPassword}, #{user.userEmail},
              #{user.userInfo}, #{user.headImg, jdbcType=BLOB},
              #{user.createTime, jdbcType = TIMESTAMP})
        </foreach>
    </insert>

    <update id="updateByMap">
        UPDATE  sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById"
            resultType="com.example.mybatisstudy.model.SysUser">
        SELECT
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id "role.id",
            r.role_name "role.roleName",
            r.enabled "role.enabled",
            r.create_by "role.createBy",
            r.create_time "role.createTime"
          FROM sys_user u
          INNER JOIN sys_user_role ur on u.id = ur.user_id
          INNER JOIN sys_role r on ur.role_id = r.id
          WHERE u.id = #{id}
    </select>



    <resultMap id="userRoleMap" extends="userMap" type="com.example.mybatisstudy.model.SysUser">
       <association property="role" columnPrefix="role_"
                    resultMap="com.example.mybatisstudy.mapper.RoleMapper.roleMap" />
    </resultMap>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
          FROM sys_user u
          INNER JOIN sys_user_role ur on u.id = ur.user_id
          INNER JOIN sys_role r on ur.role_id = r.id
          WHERE u.id = #{id}
    </select>

    <resultMap id="userRoleMapSelect" extends="userMap"
               type="com.example.mybatisstudy.model.SysUser">
        <association property="role" column="{id=role_id}" fetchType="lazy"
                     select="com.example.mybatisstudy.mapper.RoleMapper.selectRoleById" />
    </resultMap>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect" >
        SELECT
          u.id,
          u.user_name,
          u.user_password,
          u.user_info,
          u.head_img,
          ur.role_id
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        WHERE u.id = #{id}
    </select>

    <resultMap id="userRoleListMap" extends="userMap" type="com.example.mybatisstudy.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="com.example.mybatisstudy.mapper.RoleMapper.rolePrivilegeListMap">
        </collection>
    </resultMap>
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap" >
        SELECT
          u.id,
          u.user_name,
          u.user_password,
          u.user_info,
          u.head_img,
          u.create_time,
          r.id role_id,
          r.role_name role_role_name,
          r.enabled role_enabled,
          r.create_by role_create_by,
          r.create_time role_create_time,
          p.id role_privilege_id,
          p.privilege_name role_privilege_privilege_name,
          p.privilege_url role_privilege_privilege_url
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        INNER JOIN sys_role_privilege rp ON rp.role_id = r.id
        INNER JOIN sys_privilege p ON p.id = rp.privilege_id
    </select>

    <resultMap id="userRoleListMapSelect" extends="userMap"
               type="com.example.mybatisstudy.model.SysUser">
        <collection property="roleList"
                    fetchType="lazy"
                    select="com.example.mybatisstudy.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId = id}" />
    </resultMap>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        SELECT
          u.id,
          u.user_name,
          u.user_password,
          u.user_email,
          u.user_info,
          u.head_img,
          u.create_time
        FROM sys_user u
        WHERE u.id = #{id}
    </select>

    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
            #{id, mode = IN},
            #{userName, mode=OUT, jdbcType=VARCHAR},
            #{userPassword, mode=OUT, jdbcType=VARCHAR},
            #{userEmail, mode = OUT, jdbcType = VARCHAR},
            #{userInfo, mode = OUT, jdbcType = VARCHAR},
            #{headImg, mode = OUT, jdbcType = BLOB, javaType = _byte[]},
            #{createTime, mode = OUT, jdbcType=TIMESTAMP}
        )}
    </select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
        {call select_user_page(
            #{userName, mode=IN},
            #{offset, mode = IN},
            #{limit, mode = IN},
            #{total, mode=OUT, jdbcType=BIGINT}
        )}
    </select>

    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
          #{user.id, mode=OUT, jdbcType = BIGINT},
          #{user.userName, mode=IN},
          #{user.userPassword, mode=IN},
          #{user.userEmail, mode = IN},
          #{user.userInfo, mode = IN},
          #{user.headImg, mode = IN, jdbcType = BLOB},
          #{user.createTime, mode = OUT, jdbcType = TIMESTAMP},
          #{rolesId, mode=IN}
        )}
    </insert>

    <delete id="deleteUserById" statementType="CALLABLE">
        {call delete_user_by_id(#{id, mode=IN})}
    </delete>


</mapper>